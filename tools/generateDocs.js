const fs = require('fs');
const path = require('path');
const _ = require('lodash');
const docGen = require('react-docgen');
const markdown = require('./markdown');
require('jsdom-global')();

// shim require to ignore non-js files
['.eot', '.svg', '.png', '.ttf', '.ott', '.woff', '.woff2'].forEach((ext) => {
  require.extensions[ext] = () => {};
});

const links = [];

const addUsage = (componentName, componentFilePath) => {
  const Component = require(componentFilePath.replace('src', 'dist')).default;
  if (!Component) {
    return '';
  }

  return Component.usage || `No usage details for this component.`;
}

const gen = (componentName, componentFilePath) => {
  console.info(`Generating ${componentName}`);
  let md;
  try {
    const fileContents = fs.readFileSync(componentFilePath);
    const docs = docGen.parse(fileContents);
    md = markdown(componentName, docs, componentFilePath);
  } catch (err) {
    if (err.message = 'Error: No suitable component definition found.') {
      md = `${componentName}
====

      `;
    }
  }

  md += addUsage(componentName, componentFilePath);

  fs.writeFileSync(path.resolve(__dirname, '..', 'docs', `${componentName}.md`), md);
  links.push(`./${componentName}.md`);
}

const genComponents = (dir, subDirs, files) => {
  console.info(`Walking dir ${dir}...`);
  const dirName = dir.split(path.sep).pop();
  if (files.includes('index.js')) {
    gen(dirName, path.resolve(dir, 'index.js'));
  }

  files.forEach((fileName) => {
    if (fileName.split('.').pop() !== 'js') {
      return;
    }

    const name = fileName.replace('.js', '');
    const filePath = path.resolve(dir, fileName);
    if (
      (_.upperFirst(fileName) === fileName || ['theme', 'extensions'].includes(dirName)) &&
      name !== dirName
    ) {
      gen(name, filePath);
    }
  });
}

const genAll = (src) => {
  const filenames = fs.readdirSync(src);
  const dirInfo = filenames.reduce((acc, name) => {
    const filePath = path.join(src, name);
    if (fs.statSync(filePath).isDirectory()) {
      acc.dirs.push(name);
    } else {
      acc.files.push(name);
    }

    return acc;
  }, { files: [], dirs: [] });

  genComponents(src, dirInfo.dirs, dirInfo.files);

  dirInfo.dirs.forEach((dir) => {
    const absPath = path.join(src, dir);
    genAll(absPath);
  });
}

fs.mkdirSync(path.resolve(__dirname, '..', 'docs'));

genAll(path.resolve(__dirname, '..', 'src'));

// finally, generate the index file
const linksMd = links.map((link) => `[${link.replace('.md', '').replace('./', '')}](${link})`);
const indexContent = `# Bandwidth Shared Components
${linksMd.join('\n\n')}

-----------------------
This file is auto-generated by tools/generateDocs.js
`;

fs.writeFileSync(path.resolve(__dirname, '..', 'docs', 'index.md'), indexContent);

process.exit();
